result <- c()
tokText <- TokenizeText(rawText)
for (i in 1:limit){
tempMean <- mean(nchar(tokText[1:i]))
result <- append(result, tempMean)
#progress bar
cat(i, "\n")
}
return(result)
}
vysledek <- growing(rawLangIT, 1000)
hist(vysledek)
#Input of function: 1. raw txt file, 2. number of shuffles (int)
meanChars <- function(rawText, shuffleNumber) {
result <- c()
tokText <- TokenizeText(rawText)
for (i in 1:shuffleNumber){
tempMean <- mean(nchar(sample(tokText, replace = T)))
result <- append(result, tempMean)
#progress bar
cat(i, "\n")
}
return(result)
}
vysledek <- meanChars(rawLangIT, 200)
vysledekHist <- hist(result, breaks = 100)
#Input of function: 1. raw txt file, 2. number of shuffles (int)
meanChars <- function(rawText, shuffleNumber) {
result <- c()
tokText <- TokenizeText(rawText)
for (i in 1:shuffleNumber){
tempMean <- mean(nchar(sample(tokText, replace = T)))
result <- append(result, tempMean)
#progress bar
cat(i, "\n")
}
return(result)
}
vysledek <- meanChars(rawLangIT, 200)
vysledekHist <- hist(vysledek, breaks = 100)
vysledek
vysledekHist
mean(vysledek)
quantile(vysledek,  probs=c(0.025, 0.975) )
vysledekHist
vysledekHist()
#### exec. time
start.time <- Sys.time()
## Ve vagonu je 92 lidí (83p + 9l), v kabince 5 lidí.
probabilityTrain <- function(shuffleNumber){
vagon <- c(rep("pravak", 83), rep("levak", 9))
vysledek <- c()
for (i in 1:shuffleNumber){
kabinka <- sample(vagon, 5)
vysledek <- append(vysledek, sum(kabinka == "levak"))
}
return(vysledek)
}
vysledek <- probabilityTrain(200000)
table(vysledek)
quantile(vysledek, probs=c(0.025, 0.975))
hist(vysledek)
#### exec. time
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
####
vysledek
table(vysledek)
hist(vysledek)
quantile(vysledek, probs=c(0.025, 0.975))
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
}
resultGraphemes <- graphemesBoxplot(rawLangIt)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
result(tokText)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
return(tokText)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
hist(resultGraphemes)
table(graphemesBoxplot)
table(resultGraphemes)
hist(table(resultGraphemes))
hist(table(resultGraphemes), probs=100)
hist(table(resultGraphemes), breaks=100)
hist(table(resultGraphemes), breaks=100)
resultGraphemes
type(resultGraphemes)
typeof(resultGraphemes)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
bootstrap <- sample(tokText, replace = T)
return(bootstrap)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resulthGraphemes
resultGraphemes
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
bootstrap <- sample(tokText, replace = T)
return(bootstrap)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 100) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
}
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
storage
resultGraphemes
resultGraphemes
typeof(resultGraphemes)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 100) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
}
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:100) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
}
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:100) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
table(resultGraphemes)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:100) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
return(table(storage))
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
return(table(storage))
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
hist(resultGraphemes)
boxplot(resultGraphemes)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
return(boxplot(storage))
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
resultGraphemes
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
return(boxplot(storage))
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
bootstrap(resultGraphemes)
boxplot(resultGraphemes)
table(resultGraphemes)
table(resultGraphemes[])
table(resultGraphemes[[]])
table(resultGraphemes["[]"])
table(resultGraphemes[""])
table(resultGraphemes[])
table(resultGraphemes())
table(resultGraphemes)
typeof(table())
typeof(table(resultGraphemes))
typeof(data.table(resultGraphemes))
resultGraphemes
sum(resultGraphemes)
typeof(table(resultGraphemes))
)
resultGraphemes
table(resultGraphemes)
table(resultGraphemes)[]
table(resultGraphemes)[""]
table(resultGraphemes)[[""]]
table(resultGraphemes)[[]]
table(resultGraphemes)[[a]]
table(resultGraphemes)["a]]
table(resultGraphemes)["a]]
table(resultGraphemes)["a"]
table(resultGraphemes)[["a"]]
table(resultGraphemes)[[""]]
table(resultGraphemes)[["a"]]
table(resultGraphemes)[[]]
table(resultGraphemes)[[""]]
table(resultGraphemes)[["[a-z]"]]
table(resultGraphemes)[["reg([a-z])"]]
table(resultGraphemes)[["a"]]
table(resultGraphemes)[[c("a")]]
table(resultGraphemes)[[c("a", "b")]]
table(resultGraphemes)[["a":"z"]]
table(resultGraphemes)[[a-z]]
table(resultGraphemes)[["a-z"]]
table(resultGraphemes)["a-z"]
table(resultGraphemes)[1]
table(resultGraphemes)[1]
table(resultGraphemes)[1:2]
table(resultGraphemes)["a"]
table(resultGraphemes)[[1]]
table(resultGraphemes)[[1:2]]
table(resultGraphemes)[[1:5]]
table(resultGraphemes)[[1]]
table(resultGraphemes)[[a]]
table(resultGraphemes)[1]
table(resultGraphemes)["1"]
table(resultGraphemes)[[[]]]
table(resultGraphemes)[[[1]]]
table(resultGraphemes)[[1]
]
as.data.frame.matrix(resultGraphemes)
as.data.frame.matrix(table(resultGraphemes)
)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
return(table(storage))
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
as.data.frame(resultGraphemes)
boxplot(as.data.frame(resultGraphemes))
boxplot(as.data.frame(resultGraphemes))[]
boxplot(as.data.frame(resultGraphemes))[[]]
boxplot(as.data.frame(resultGraphemes))[""
]
boxplot(as.data.frame.matrix(resultGraphemes))
boxplot(data.frame(resultGraphemes))
(data.frame(resultGraphemes))
(data.frame(rbind(resultGraphemes))
)
boxplot(data.frame(rbind(resultGraphemes))
))
boxplot(data.frame(rbind(resultGraphemes)))
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
data.frame(rbind(resultGraphemes))
data.frame(rbind(table(resultGraphemes))
)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
return(data.frame(rbind(storage)))
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
storage <- table(storage)
return(data.frame(rbind(storage)))
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
boxplot(resultGraphemes)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
storage <- table()%>%
rbind()%>%
data.frame()
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
storage <- table(storage)%>%
rbind()%>%
data.frame()
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
boxplot(resultGraphemes)
typeof(reusltGraphemes)
typeof(resultGraphemes)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
storage <- table(storage)
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
typeof(resultGraphemes)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
storage <- table(storage)%>%
rbind()%>%
data.frame()%>%
boxplot()
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
graphemesBoxplot <- function (rawText){
tokText <- TokenizeText(rawText, "[a-z]", regexIsMask = T)
storage <- c()
for (i in 1:10) {
bootstrap <- sample(tokText, replace = T)
storage <- append(storage, bootstrap)
cat("\n", i)
}
storage <- table(storage)
return(storage)
}
resultGraphemes <- graphemesBoxplot(rawLangIT)
resultGraphemes
getTextInfo <- function(listData){
#Deklarace vars
loopNumber <- 0
textInfoTable <- data.frame()
#Loop skrze všechny texty
for (text in listData) {
loopNumber <- loopNumber + 1
tokenizedText <- TokenizeText(text)
textName <- names(listData[loopNumber])
cat("\n \n Working on: ")
cat(textName)
#JEDNOTLIVÉ FUNKCE
#1. Počet typů a tokenů
getToken <- length(tokenizedText)
getType <- length(unique(tokenizedText))
#2. Průměrná délka slov
getMeanWord <- mean(nchar(tokenizedText))
#3. Entropie slov
p <- table(getToken) / getType
getEntropy <- - sum(p * log(p))
#4. Udpipe questy (model, anotace)
annotate <- udpipe_annotate(modelUdpipe, x = text)
tableAnnotated <- as.data.frame(annotate)
#4.1. Průměrná délka vět
sentenceTable <- table(tableAnnotated$sentence_id)
sentenceListNum <- c()
for (sentence in sentenceTable)sentenceListNum <- append(sentence, sentenceListNum)
getMeanSentence <- mean(sentenceListNum)
#4.2. Celkový počet sloves a podstatných jmen ve 2. pádu
POS <- tableAnnotated$upos
getVerbs <- length(which(POS == "VERB"))
getNouns <- grepl("N...2.*", tableAnnotated$xpos)%>%
which()%>%
length()
#Vložení do tabulky
textInfoTable <- rbind(textInfoTable, c(getToken, getType, getMeanWord, getMeanSentence, getEntropy, getVerbs, getNouns))
}
#Pojmenování řádků a seznamů tabulky
colnames(textInfoTable) <- c("Počet tokenů", "Počet typů", "Průměrná délka slov", "Průměrná délka vět", "Entropie", "Verbs", "Nouns (2. pád)")
rownames(textInfoTable) <- names(list)
return(textInfoTable)
}
vysledek <- getTextInfo(qfin_loadDirectory)
getTextInfo <- function(listData){
#Deklarace vars
loopNumber <- 0
textInfoTable <- data.frame()
#Loop skrze všechny texty
for (text in listData) {
loopNumber <- loopNumber + 1
tokenizedText <- TokenizeText(text)
textName <- names(listData[loopNumber])
cat("\n \n Working on: ")
cat(textName)
#JEDNOTLIVÉ FUNKCE
#1. Počet typů a tokenů
getToken <- length(tokenizedText)
getType <- length(unique(tokenizedText))
#2. Průměrná délka slov
getMeanWord <- mean(nchar(tokenizedText))
#3. Entropie slov
p <- table(getToken) / getType
getEntropy <- - sum(p * log(p))
#4. Udpipe questy (model, anotace)
annotate <- udpipe_annotate(modelUdpipe, x = text)
tableAnnotated <- as.data.frame(annotate)
#4.1. Průměrná délka vět
sentenceTable <- table(tableAnnotated$sentence_id)
sentenceListNum <- c()
for (sentence in sentenceTable)sentenceListNum <- append(sentence, sentenceListNum)
getMeanSentence <- mean(sentenceListNum)
#4.2. Celkový počet sloves a podstatných jmen ve 2. pádu
POS <- tableAnnotated$upos
getVerbs <- length(which(POS == "VERB"))
getNouns <- grepl("N...2.*", tableAnnotated$xpos)%>%
which()%>%
length()
#Vložení do tabulky
textInfoTable <- rbind(textInfoTable, c(getToken, getType, getMeanWord, getMeanSentence, getEntropy, getVerbs, getNouns))
}
#Pojmenování řádků a seznamů tabulky
colnames(textInfoTable) <- c("Počet tokenů", "Počet typů", "Průměrná délka slov", "Průměrná délka vět", "Entropie", "Verbs", "Nouns (2. pád)")
rownames(textInfoTable) <- names(list)
return(textInfoTable)
}
vysledek <- getTextInfo(qfin_loadDirectory)
vysledek
